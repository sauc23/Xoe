{
  "version": 3,
  "sources": ["../src/uv.sw.js"],
  "sourcesContent": ["/*globals __uv$config*/\n// Users must import the config (and bundle) prior to importing uv.sw.js\n// This is to allow us to produce a generic bundle with no hard-coded paths.\n\n/**\n * @type {import('../uv').UltravioletCtor}\n */\nconst Ultraviolet = self.Ultraviolet;\n\nconst cspHeaders = [\n\t\"cross-origin-embedder-policy\",\n\t\"cross-origin-opener-policy\",\n\t\"cross-origin-resource-policy\",\n\t\"content-security-policy\",\n\t\"content-security-policy-report-only\",\n\t\"expect-ct\",\n\t\"feature-policy\",\n\t\"origin-isolation\",\n\t\"strict-transport-security\",\n\t\"upgrade-insecure-requests\",\n\t\"x-content-type-options\",\n\t\"x-download-options\",\n\t\"x-frame-options\",\n\t\"x-permitted-cross-domain-policies\",\n\t\"x-powered-by\",\n\t\"x-xss-protection\",\n];\nconst emptyMethods = [\"GET\", \"HEAD\"];\n\nclass UVServiceWorker extends Ultraviolet.EventEmitter {\n\tconstructor(config = __uv$config) {\n\t\tsuper();\n\t\tif (!config.prefix) config.prefix = \"/service/\";\n\t\tthis.config = config;\n\t\t/**\n\t\t * @type {InstanceType<Ultraviolet['BareClient']>}\n\t\t */\n\t\tthis.bareClient = new Ultraviolet.BareClient();\n\t}\n\t/**\n\t *\n\t * @param {Event & {request: Request}} param0\n\t * @returns\n\t */\n\troute({ request }) {\n\t\tif (request.url.startsWith(location.origin + this.config.prefix))\n\t\t\treturn true;\n\t\telse return false;\n\t}\n\t/**\n\t *\n\t * @param {Event & {request: Request}} param0\n\t * @returns\n\t */\n\tasync fetch({ request }) {\n\t\t/**\n\t\t * @type {string|void}\n\t\t */\n\t\tlet fetchedURL;\n\n\t\ttry {\n\t\t\tif (!request.url.startsWith(location.origin + this.config.prefix))\n\t\t\t\treturn await fetch(request);\n\n\t\t\tconst ultraviolet = new Ultraviolet(this.config);\n\n\t\t\tif (typeof this.config.construct === \"function\") {\n\t\t\t\tthis.config.construct(ultraviolet, \"service\");\n\t\t\t}\n\n\t\t\tconst db = await ultraviolet.cookie.db();\n\n\t\t\tultraviolet.meta.origin = location.origin;\n\t\t\tultraviolet.meta.base = ultraviolet.meta.url = new URL(\n\t\t\t\tultraviolet.sourceUrl(request.url)\n\t\t\t);\n\n\t\t\tconst requestCtx = new RequestContext(\n\t\t\t\trequest,\n\t\t\t\tultraviolet,\n\t\t\t\t!emptyMethods.includes(request.method.toUpperCase())\n\t\t\t\t\t? await request.blob()\n\t\t\t\t\t: null\n\t\t\t);\n\n\t\t\tif (ultraviolet.meta.url.protocol === \"blob:\") {\n\t\t\t\trequestCtx.blob = true;\n\t\t\t\trequestCtx.base = requestCtx.url = new URL(requestCtx.url.pathname);\n\t\t\t}\n\n\t\t\tif (request.referrer && request.referrer.startsWith(location.origin)) {\n\t\t\t\tconst referer = new URL(ultraviolet.sourceUrl(request.referrer));\n\n\t\t\t\tif (\n\t\t\t\t\trequestCtx.headers.origin ||\n\t\t\t\t\t(ultraviolet.meta.url.origin !== referer.origin &&\n\t\t\t\t\t\trequest.mode === \"cors\")\n\t\t\t\t) {\n\t\t\t\t\trequestCtx.headers.origin = referer.origin;\n\t\t\t\t}\n\n\t\t\t\trequestCtx.headers.referer = referer.href;\n\t\t\t}\n\n\t\t\tconst cookies = (await ultraviolet.cookie.getCookies(db)) || [];\n\t\t\tconst cookieStr = ultraviolet.cookie.serialize(\n\t\t\t\tcookies,\n\t\t\t\tultraviolet.meta,\n\t\t\t\tfalse\n\t\t\t);\n\n\t\t\trequestCtx.headers[\"user-agent\"] = navigator.userAgent;\n\n\t\t\tif (cookieStr) requestCtx.headers.cookie = cookieStr;\n\n\t\t\tconst reqEvent = new HookEvent(requestCtx, null, null);\n\t\t\tthis.emit(\"request\", reqEvent);\n\n\t\t\tif (reqEvent.intercepted) return reqEvent.returnValue;\n\n\t\t\tfetchedURL = requestCtx.blob\n\t\t\t\t? \"blob:\" + location.origin + requestCtx.url.pathname\n\t\t\t\t: requestCtx.url;\n\n\t\t\tconst response = await this.bareClient.fetch(fetchedURL, {\n\t\t\t\theaders: requestCtx.headers,\n\t\t\t\tmethod: requestCtx.method,\n\t\t\t\tbody: requestCtx.body,\n\t\t\t\tcredentials: requestCtx.credentials,\n\t\t\t\tmode: requestCtx.mode,\n\t\t\t\tcache: requestCtx.cache,\n\t\t\t\tredirect: requestCtx.redirect,\n\t\t\t});\n\n\t\t\tconst responseCtx = new ResponseContext(requestCtx, response);\n\t\t\tconst resEvent = new HookEvent(responseCtx, null, null);\n\n\t\t\tthis.emit(\"beforemod\", resEvent);\n\t\t\tif (resEvent.intercepted) return resEvent.returnValue;\n\n\t\t\tfor (const name of cspHeaders) {\n\t\t\t\tif (responseCtx.headers[name]) delete responseCtx.headers[name];\n\t\t\t}\n\n\t\t\tif (responseCtx.headers.location) {\n\t\t\t\tresponseCtx.headers.location = ultraviolet.rewriteUrl(\n\t\t\t\t\tresponseCtx.headers.location\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// downloads\n\t\t\tif ([\"document\", \"iframe\"].includes(request.destination)) {\n\t\t\t\tconst header = responseCtx.getHeader(\"content-disposition\");\n\n\t\t\t\t// validate header and test for filename\n\t\t\t\tif (!/\\s*?((inline|attachment);\\s*?)filename=/i.test(header)) {\n\t\t\t\t\t// if filename= wasn't specified then maybe the remote specified to download this as an attachment?\n\t\t\t\t\t// if it's invalid then we can still possibly test for the attachment/inline type\n\t\t\t\t\tconst type = /^\\s*?attachment/i.test(header)\n\t\t\t\t\t\t? \"attachment\"\n\t\t\t\t\t\t: \"inline\";\n\n\t\t\t\t\t// set the filename\n\t\t\t\t\tconst [filename] = new URL(response.finalURL).pathname\n\t\t\t\t\t\t.split(\"/\")\n\t\t\t\t\t\t.slice(-1);\n\n\t\t\t\t\tresponseCtx.headers[\"content-disposition\"] =\n\t\t\t\t\t\t`${type}; filename=${JSON.stringify(filename)}`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (responseCtx.headers[\"set-cookie\"]) {\n\t\t\t\tPromise.resolve(\n\t\t\t\t\tultraviolet.cookie.setCookies(\n\t\t\t\t\t\tresponseCtx.headers[\"set-cookie\"],\n\t\t\t\t\t\tdb,\n\t\t\t\t\t\tultraviolet.meta\n\t\t\t\t\t)\n\t\t\t\t).then(() => {\n\t\t\t\t\tself.clients.matchAll().then(function (clients) {\n\t\t\t\t\t\tclients.forEach(function (client) {\n\t\t\t\t\t\t\tclient.postMessage({\n\t\t\t\t\t\t\t\tmsg: \"updateCookies\",\n\t\t\t\t\t\t\t\turl: ultraviolet.meta.url.href,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tdelete responseCtx.headers[\"set-cookie\"];\n\t\t\t}\n\n\t\t\tif (responseCtx.body) {\n\t\t\t\tswitch (request.destination) {\n\t\t\t\t\tcase \"script\":\n\t\t\t\t\t\tresponseCtx.body = ultraviolet.js.rewrite(await response.text());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"worker\":\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// craft a JS-safe list of arguments\n\t\t\t\t\t\t\tconst scripts = [\n\t\t\t\t\t\t\t\tultraviolet.bundleScript,\n\t\t\t\t\t\t\t\tultraviolet.clientScript,\n\t\t\t\t\t\t\t\tultraviolet.configScript,\n\t\t\t\t\t\t\t\tultraviolet.handlerScript,\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t.map((script) => JSON.stringify(script))\n\t\t\t\t\t\t\t\t.join(\",\");\n\t\t\t\t\t\t\tresponseCtx.body = `if (!self.__uv) {\n                                ${ultraviolet.createJsInject(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tultraviolet.cookie.serialize(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcookies,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tultraviolet.meta,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trequest.referrer\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n                            importScripts(${scripts});\n                            }\\n`;\n\t\t\t\t\t\t\tresponseCtx.body += ultraviolet.js.rewrite(await response.text());\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"style\":\n\t\t\t\t\t\tresponseCtx.body = ultraviolet.rewriteCSS(await response.text());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"iframe\":\n\t\t\t\t\tcase \"document\":\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tresponseCtx.getHeader(\"content-type\") &&\n\t\t\t\t\t\t\tresponseCtx.getHeader(\"content-type\").startsWith(\"text/html\")\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tlet modifiedResponse = await response.text();\n\t\t\t\t\t\t\tif (Array.isArray(this.config.inject)) {\n\t\t\t\t\t\t\t\tconst headPosition = modifiedResponse.indexOf(\"<head>\");\n\t\t\t\t\t\t\t\tconst upperHead = modifiedResponse.indexOf(\"<HEAD>\");\n\t\t\t\t\t\t\t\tconst bodyPosition = modifiedResponse.indexOf(\"<body>\");\n\t\t\t\t\t\t\t\tconst upperBody = modifiedResponse.indexOf(\"<BODY>\");\n\t\t\t\t\t\t\t\tconst url = new URL(fetchedURL);\n\t\t\t\t\t\t\t\tconst injectArray = this.config.inject;\n\t\t\t\t\t\t\t\tfor (const inject of injectArray) {\n\t\t\t\t\t\t\t\t\tconst regex = new RegExp(inject.host);\n\t\t\t\t\t\t\t\t\tif (regex.test(url.host)) {\n\t\t\t\t\t\t\t\t\t\tif (inject.injectTo === \"head\") {\n\t\t\t\t\t\t\t\t\t\t\tif (headPosition !== -1 || upperHead !== -1) {\n\t\t\t\t\t\t\t\t\t\t\t\tmodifiedResponse =\n\t\t\t\t\t\t\t\t\t\t\t\t\tmodifiedResponse.slice(0, headPosition) +\n\t\t\t\t\t\t\t\t\t\t\t\t\t`${inject.html}` +\n\t\t\t\t\t\t\t\t\t\t\t\t\tmodifiedResponse.slice(headPosition);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else if (inject.injectTo === \"body\") {\n\t\t\t\t\t\t\t\t\t\t\tif (bodyPosition !== -1 || upperBody !== -1) {\n\t\t\t\t\t\t\t\t\t\t\t\tmodifiedResponse =\n\t\t\t\t\t\t\t\t\t\t\t\t\tmodifiedResponse.slice(0, bodyPosition) +\n\t\t\t\t\t\t\t\t\t\t\t\t\t`${inject.html}` +\n\t\t\t\t\t\t\t\t\t\t\t\t\tmodifiedResponse.slice(bodyPosition);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresponseCtx.body = ultraviolet.rewriteHtml(modifiedResponse, {\n\t\t\t\t\t\t\t\tdocument: true,\n\t\t\t\t\t\t\t\tinjectHead: ultraviolet.createHtmlInject(\n\t\t\t\t\t\t\t\t\tultraviolet.handlerScript,\n\t\t\t\t\t\t\t\t\tultraviolet.bundleScript,\n\t\t\t\t\t\t\t\t\tultraviolet.clientScript,\n\t\t\t\t\t\t\t\t\tultraviolet.configScript,\n\t\t\t\t\t\t\t\t\tultraviolet.cookie.serialize(cookies, ultraviolet.meta, true),\n\t\t\t\t\t\t\t\t\trequest.referrer\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (requestCtx.headers.accept === \"text/event-stream\") {\n\t\t\t\tresponseCtx.headers[\"content-type\"] = \"text/event-stream\";\n\t\t\t}\n\t\t\tif (crossOriginIsolated) {\n\t\t\t\tresponseCtx.headers[\"Cross-Origin-Embedder-Policy\"] = \"require-corp\";\n\t\t\t}\n\n\t\t\tthis.emit(\"response\", resEvent);\n\t\t\tif (resEvent.intercepted) return resEvent.returnValue;\n\n\t\t\treturn new Response(responseCtx.body, {\n\t\t\t\theaders: responseCtx.headers,\n\t\t\t\tstatus: responseCtx.status,\n\t\t\t\tstatusText: responseCtx.statusText,\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tif (![\"document\", \"iframe\"].includes(request.destination))\n\t\t\t\treturn new Response(undefined, { status: 500 });\n\n\t\t\tconsole.error(err);\n\n\t\t\treturn renderError(err, fetchedURL);\n\t\t}\n\t}\n\tstatic Ultraviolet = Ultraviolet;\n}\n\nself.UVServiceWorker = UVServiceWorker;\n\nclass ResponseContext {\n\t/**\n\t *\n\t * @param {RequestContext} request\n\t * @param {import(\"@mercuryworkshop/bare-mux\").BareResponseFetch} response\n\t */\n\tconstructor(request, response) {\n\t\tthis.request = request;\n\t\tthis.raw = response;\n\t\tthis.ultraviolet = request.ultraviolet;\n\t\tthis.headers = {};\n\t\t// eg set-cookie\n\t\tfor (const key in response.rawHeaders)\n\t\t\tthis.headers[key.toLowerCase()] = response.rawHeaders[key];\n\t\tthis.status = response.status;\n\t\tthis.statusText = response.statusText;\n\t\tthis.body = response.body;\n\t}\n\tget url() {\n\t\treturn this.request.url;\n\t}\n\tget base() {\n\t\treturn this.request.base;\n\t}\n\tset base(val) {\n\t\tthis.request.base = val;\n\t}\n\t//the header value might be an array, so this function is used to\n\t//retrieve the value when it needs to be compared against a string\n\tgetHeader(key) {\n\t\tif (Array.isArray(this.headers[key])) {\n\t\t\treturn this.headers[key][0];\n\t\t}\n\t\treturn this.headers[key];\n\t}\n}\n\nclass RequestContext {\n\t/**\n\t *\n\t * @param {Request} request\n\t * @param {Ultraviolet} ultraviolet\n\t * @param {BodyInit} body\n\t */\n\tconstructor(request, ultraviolet, body = null) {\n\t\tthis.ultraviolet = ultraviolet;\n\t\tthis.request = request;\n\t\tthis.headers = Object.fromEntries(request.headers.entries());\n\t\tthis.method = request.method;\n\t\tthis.body = body || null;\n\t\tthis.cache = request.cache;\n\t\tthis.redirect = request.redirect;\n\t\tthis.credentials = \"omit\";\n\t\tthis.mode = request.mode === \"cors\" ? request.mode : \"same-origin\";\n\t\tthis.blob = false;\n\t}\n\tget url() {\n\t\treturn this.ultraviolet.meta.url;\n\t}\n\tset url(val) {\n\t\tthis.ultraviolet.meta.url = val;\n\t}\n\tget base() {\n\t\treturn this.ultraviolet.meta.base;\n\t}\n\tset base(val) {\n\t\tthis.ultraviolet.meta.base = val;\n\t}\n}\n\nclass HookEvent {\n\t#intercepted;\n\t#returnValue;\n\tconstructor(data = {}, target = null, that = null) {\n\t\tthis.#intercepted = false;\n\t\tthis.#returnValue = null;\n\t\tthis.data = data;\n\t\tthis.target = target;\n\t\tthis.that = that;\n\t}\n\tget intercepted() {\n\t\treturn this.#intercepted;\n\t}\n\tget returnValue() {\n\t\treturn this.#returnValue;\n\t}\n\trespondWith(input) {\n\t\tthis.#returnValue = input;\n\t\tthis.#intercepted = true;\n\t}\n}\n\n/**\n *\n * @param {string} trace\n * @param {string} fetchedURL\n * @returns\n */\nfunction errorTemplate(trace, fetchedURL) {\n\t// turn script into a data URI so we don't have to escape any HTML values\n\tconst script = `\n        errorTrace.value = ${JSON.stringify(trace)};\n        fetchedURL.textContent = ${JSON.stringify(fetchedURL)};\n        for (const node of document.querySelectorAll(\"#uvHostname\")) node.textContent = ${JSON.stringify(\n\t\t\t\t\tlocation.hostname\n\t\t\t\t)};\n        reload.addEventListener(\"click\", () => location.reload());\n        uvVersion.textContent = ${JSON.stringify(\n\t\t\t\t\tprocess.env.ULTRAVIOLET_VERSION\n\t\t\t\t)};\n        uvBuild.textContent = ${JSON.stringify(\n\t\t\t\t\tprocess.env.ULTRAVIOLET_COMMIT_HASH\n\t\t\t\t)};\n    `;\n\n\treturn `<!DOCTYPE html>\n        <html>\n        <head>\n        <meta charset='utf-8' />\n        <title>Error</title>\n        <style>\n        * { background-color: white }\n        </style>\n        </head>\n        <body>\n        <h1 id='errorTitle'>Error processing your request</h1>\n        <hr />\n        <p>Failed to load <b id=\"fetchedURL\"></b></p>\n        <p id=\"errorMessage\">Internal Server Error</p>\n        <textarea id=\"errorTrace\" cols=\"40\" rows=\"10\" readonly></textarea>\n        <p>Try:</p>\n        <ul>\n        <li>Checking your internet connection</li>\n        <li>Verifying you entered the correct address</li>\n        <li>Clearing the site data</li>\n        <li>Contacting <b id=\"uvHostname\"></b>'s administrator</li>\n        <li>Verify the server isn't censored</li>\n        </ul>\n        <p>If you're the administrator of <b id=\"uvHostname\"></b>, try:</p>\n        <ul>\n        <li>Restarting your server</li>\n        <li>Updating Ultraviolet</li>\n        <li>Troubleshooting the error on the <a href=\"https://github.com/titaniumnetwork-dev/Ultraviolet\" target=\"_blank\">GitHub repository</a></li>\n        </ul>\n        <button id=\"reload\">Reload</button>\n        <hr />\n        <p><i>Ultraviolet v<span id=\"uvVersion\"></span> (build <span id=\"uvBuild\"></span>)</i></p>\n        <script src=\"${\n\t\t\t\t\t\"data:application/javascript,\" + encodeURIComponent(script)\n\t\t\t\t}\"></script>\n        </body>\n        </html>\n        `;\n}\n\n/**\n *\n * @param {unknown} err\n * @param {string} fetchedURL\n */\nfunction renderError(err, fetchedURL) {\n\tlet headers = {\n\t\t\"content-type\": \"text/html\",\n\t};\n\tif (crossOriginIsolated) {\n\t\theaders[\"Cross-Origin-Embedder-Policy\"] = \"require-corp\";\n\t}\n\n\treturn new Response(errorTemplate(String(err), fetchedURL), {\n\t\tstatus: 500,\n\t\theaders: headers,\n\t});\n}\n"],
  "mappings": "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",
  "names": ["Ultraviolet", "cspHeaders", "emptyMethods", "UVServiceWorker", "config", "request", "fetchedURL", "ultraviolet", "db", "requestCtx", "RequestContext", "referer", "cookies", "cookieStr", "reqEvent", "HookEvent", "response", "responseCtx", "ResponseContext", "resEvent", "name", "header", "type", "filename", "clients", "client", "scripts", "script", "modifiedResponse", "headPosition", "upperHead", "bodyPosition", "upperBody", "url", "injectArray", "inject", "err", "renderError", "key", "val", "body", "#intercepted", "#returnValue", "data", "target", "that", "input", "errorTemplate", "trace", "headers"]
}
